// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_benchmark_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_benchmark_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_benchmark_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_benchmark_5fmsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_benchmark_5fmsg_2eproto;
namespace apollo {
namespace cyber {
namespace benchmark {
class BenchmarkMsg;
struct BenchmarkMsgDefaultTypeInternal;
extern BenchmarkMsgDefaultTypeInternal _BenchmarkMsg_default_instance_;
}  // namespace benchmark
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::benchmark::BenchmarkMsg* Arena::CreateMaybeMessage<::apollo::cyber::benchmark::BenchmarkMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {
namespace benchmark {

// ===================================================================

class BenchmarkMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.benchmark.BenchmarkMsg) */ {
 public:
  inline BenchmarkMsg() : BenchmarkMsg(nullptr) {}
  ~BenchmarkMsg() override;
  explicit PROTOBUF_CONSTEXPR BenchmarkMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BenchmarkMsg(const BenchmarkMsg& from);
  BenchmarkMsg(BenchmarkMsg&& from) noexcept
    : BenchmarkMsg() {
    *this = ::std::move(from);
  }

  inline BenchmarkMsg& operator=(const BenchmarkMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BenchmarkMsg& operator=(BenchmarkMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BenchmarkMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const BenchmarkMsg* internal_default_instance() {
    return reinterpret_cast<const BenchmarkMsg*>(
               &_BenchmarkMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BenchmarkMsg& a, BenchmarkMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(BenchmarkMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BenchmarkMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BenchmarkMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BenchmarkMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BenchmarkMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BenchmarkMsg& from) {
    BenchmarkMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BenchmarkMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.benchmark.BenchmarkMsg";
  }
  protected:
  explicit BenchmarkMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kDataBytesFieldNumber = 2,
  };
  // repeated uint32 data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  uint32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_data() const;
  void _internal_add_data(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_data();
  public:
  uint32_t data(int index) const;
  void set_data(int index, uint32_t value);
  void add_data(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_data();

  // optional bytes data_bytes = 2;
  bool has_data_bytes() const;
  private:
  bool _internal_has_data_bytes() const;
  public:
  void clear_data_bytes();
  const std::string& data_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_bytes();
  PROTOBUF_NODISCARD std::string* release_data_bytes();
  void set_allocated_data_bytes(std::string* data_bytes);
  private:
  const std::string& _internal_data_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_bytes(const std::string& value);
  std::string* _internal_mutable_data_bytes();
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.benchmark.BenchmarkMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_bytes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_benchmark_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BenchmarkMsg

// repeated uint32 data = 1;
inline int BenchmarkMsg::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int BenchmarkMsg::data_size() const {
  return _internal_data_size();
}
inline void BenchmarkMsg::clear_data() {
  _impl_.data_.Clear();
}
inline uint32_t BenchmarkMsg::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline uint32_t BenchmarkMsg::data(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.benchmark.BenchmarkMsg.data)
  return _internal_data(index);
}
inline void BenchmarkMsg::set_data(int index, uint32_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:apollo.cyber.benchmark.BenchmarkMsg.data)
}
inline void BenchmarkMsg::_internal_add_data(uint32_t value) {
  _impl_.data_.Add(value);
}
inline void BenchmarkMsg::add_data(uint32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:apollo.cyber.benchmark.BenchmarkMsg.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BenchmarkMsg::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BenchmarkMsg::data() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.benchmark.BenchmarkMsg.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BenchmarkMsg::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BenchmarkMsg::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.benchmark.BenchmarkMsg.data)
  return _internal_mutable_data();
}

// optional bytes data_bytes = 2;
inline bool BenchmarkMsg::_internal_has_data_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BenchmarkMsg::has_data_bytes() const {
  return _internal_has_data_bytes();
}
inline void BenchmarkMsg::clear_data_bytes() {
  _impl_.data_bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BenchmarkMsg::data_bytes() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.benchmark.BenchmarkMsg.data_bytes)
  return _internal_data_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BenchmarkMsg::set_data_bytes(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.benchmark.BenchmarkMsg.data_bytes)
}
inline std::string* BenchmarkMsg::mutable_data_bytes() {
  std::string* _s = _internal_mutable_data_bytes();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.benchmark.BenchmarkMsg.data_bytes)
  return _s;
}
inline const std::string& BenchmarkMsg::_internal_data_bytes() const {
  return _impl_.data_bytes_.Get();
}
inline void BenchmarkMsg::_internal_set_data_bytes(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* BenchmarkMsg::_internal_mutable_data_bytes() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* BenchmarkMsg::release_data_bytes() {
  // @@protoc_insertion_point(field_release:apollo.cyber.benchmark.BenchmarkMsg.data_bytes)
  if (!_internal_has_data_bytes()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_bytes_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_bytes_.IsDefault()) {
    _impl_.data_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BenchmarkMsg::set_allocated_data_bytes(std::string* data_bytes) {
  if (data_bytes != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_bytes_.SetAllocated(data_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_bytes_.IsDefault()) {
    _impl_.data_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.benchmark.BenchmarkMsg.data_bytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace benchmark
}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_benchmark_5fmsg_2eproto
