// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ros_bridge_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ros_5fbridge_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ros_5fbridge_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ros_5fbridge_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ros_5fbridge_5fconf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ros_5fbridge_5fconf_2eproto;
namespace apollo {
namespace cyber {
class BridgeConf;
struct BridgeConfDefaultTypeInternal;
extern BridgeConfDefaultTypeInternal _BridgeConf_default_instance_;
class PluginDeclareInfo;
struct PluginDeclareInfoDefaultTypeInternal;
extern PluginDeclareInfoDefaultTypeInternal _PluginDeclareInfo_default_instance_;
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::BridgeConf* Arena::CreateMaybeMessage<::apollo::cyber::BridgeConf>(Arena*);
template<> ::apollo::cyber::PluginDeclareInfo* Arena::CreateMaybeMessage<::apollo::cyber::PluginDeclareInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {

// ===================================================================

class BridgeConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.BridgeConf) */ {
 public:
  inline BridgeConf() : BridgeConf(nullptr) {}
  ~BridgeConf() override;
  explicit PROTOBUF_CONSTEXPR BridgeConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BridgeConf(const BridgeConf& from);
  BridgeConf(BridgeConf&& from) noexcept
    : BridgeConf() {
    *this = ::std::move(from);
  }

  inline BridgeConf& operator=(const BridgeConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline BridgeConf& operator=(BridgeConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BridgeConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const BridgeConf* internal_default_instance() {
    return reinterpret_cast<const BridgeConf*>(
               &_BridgeConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BridgeConf& a, BridgeConf& b) {
    a.Swap(&b);
  }
  inline void Swap(BridgeConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BridgeConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BridgeConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BridgeConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BridgeConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BridgeConf& from) {
    BridgeConf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BridgeConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.BridgeConf";
  }
  protected:
  explicit BridgeConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConverterFieldNumber = 1,
  };
  // repeated .apollo.cyber.PluginDeclareInfo converter = 1;
  int converter_size() const;
  private:
  int _internal_converter_size() const;
  public:
  void clear_converter();
  ::apollo::cyber::PluginDeclareInfo* mutable_converter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::PluginDeclareInfo >*
      mutable_converter();
  private:
  const ::apollo::cyber::PluginDeclareInfo& _internal_converter(int index) const;
  ::apollo::cyber::PluginDeclareInfo* _internal_add_converter();
  public:
  const ::apollo::cyber::PluginDeclareInfo& converter(int index) const;
  ::apollo::cyber::PluginDeclareInfo* add_converter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::PluginDeclareInfo >&
      converter() const;

  // @@protoc_insertion_point(class_scope:apollo.cyber.BridgeConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::PluginDeclareInfo > converter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ros_5fbridge_5fconf_2eproto;
};
// -------------------------------------------------------------------

class PluginDeclareInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.PluginDeclareInfo) */ {
 public:
  inline PluginDeclareInfo() : PluginDeclareInfo(nullptr) {}
  ~PluginDeclareInfo() override;
  explicit PROTOBUF_CONSTEXPR PluginDeclareInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PluginDeclareInfo(const PluginDeclareInfo& from);
  PluginDeclareInfo(PluginDeclareInfo&& from) noexcept
    : PluginDeclareInfo() {
    *this = ::std::move(from);
  }

  inline PluginDeclareInfo& operator=(const PluginDeclareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PluginDeclareInfo& operator=(PluginDeclareInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PluginDeclareInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PluginDeclareInfo* internal_default_instance() {
    return reinterpret_cast<const PluginDeclareInfo*>(
               &_PluginDeclareInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PluginDeclareInfo& a, PluginDeclareInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PluginDeclareInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PluginDeclareInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PluginDeclareInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PluginDeclareInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PluginDeclareInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PluginDeclareInfo& from) {
    PluginDeclareInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PluginDeclareInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.PluginDeclareInfo";
  }
  protected:
  explicit PluginDeclareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.PluginDeclareInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ros_5fbridge_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BridgeConf

// repeated .apollo.cyber.PluginDeclareInfo converter = 1;
inline int BridgeConf::_internal_converter_size() const {
  return _impl_.converter_.size();
}
inline int BridgeConf::converter_size() const {
  return _internal_converter_size();
}
inline void BridgeConf::clear_converter() {
  _impl_.converter_.Clear();
}
inline ::apollo::cyber::PluginDeclareInfo* BridgeConf::mutable_converter(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.cyber.BridgeConf.converter)
  return _impl_.converter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::PluginDeclareInfo >*
BridgeConf::mutable_converter() {
  // @@protoc_insertion_point(field_mutable_list:apollo.cyber.BridgeConf.converter)
  return &_impl_.converter_;
}
inline const ::apollo::cyber::PluginDeclareInfo& BridgeConf::_internal_converter(int index) const {
  return _impl_.converter_.Get(index);
}
inline const ::apollo::cyber::PluginDeclareInfo& BridgeConf::converter(int index) const {
  // @@protoc_insertion_point(field_get:apollo.cyber.BridgeConf.converter)
  return _internal_converter(index);
}
inline ::apollo::cyber::PluginDeclareInfo* BridgeConf::_internal_add_converter() {
  return _impl_.converter_.Add();
}
inline ::apollo::cyber::PluginDeclareInfo* BridgeConf::add_converter() {
  ::apollo::cyber::PluginDeclareInfo* _add = _internal_add_converter();
  // @@protoc_insertion_point(field_add:apollo.cyber.BridgeConf.converter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::cyber::PluginDeclareInfo >&
BridgeConf::converter() const {
  // @@protoc_insertion_point(field_list:apollo.cyber.BridgeConf.converter)
  return _impl_.converter_;
}

// -------------------------------------------------------------------

// PluginDeclareInfo

// optional string type = 1;
inline bool PluginDeclareInfo::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PluginDeclareInfo::has_type() const {
  return _internal_has_type();
}
inline void PluginDeclareInfo::clear_type() {
  _impl_.type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PluginDeclareInfo::type() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.PluginDeclareInfo.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PluginDeclareInfo::set_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.PluginDeclareInfo.type)
}
inline std::string* PluginDeclareInfo::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.PluginDeclareInfo.type)
  return _s;
}
inline const std::string& PluginDeclareInfo::_internal_type() const {
  return _impl_.type_.Get();
}
inline void PluginDeclareInfo::_internal_set_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* PluginDeclareInfo::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* PluginDeclareInfo::release_type() {
  // @@protoc_insertion_point(field_release:apollo.cyber.PluginDeclareInfo.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PluginDeclareInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.PluginDeclareInfo.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ros_5fbridge_5fconf_2eproto
