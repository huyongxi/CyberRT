// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: converter_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_converter_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_converter_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_converter_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_converter_5fconf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_converter_5fconf_2eproto;
namespace apollo {
namespace cyber {
class ConverterConf;
struct ConverterConfDefaultTypeInternal;
extern ConverterConfDefaultTypeInternal _ConverterConf_default_instance_;
}  // namespace cyber
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::cyber::ConverterConf* Arena::CreateMaybeMessage<::apollo::cyber::ConverterConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace cyber {

// ===================================================================

class ConverterConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.cyber.ConverterConf) */ {
 public:
  inline ConverterConf() : ConverterConf(nullptr) {}
  ~ConverterConf() override;
  explicit PROTOBUF_CONSTEXPR ConverterConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConverterConf(const ConverterConf& from);
  ConverterConf(ConverterConf&& from) noexcept
    : ConverterConf() {
    *this = ::std::move(from);
  }

  inline ConverterConf& operator=(const ConverterConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConverterConf& operator=(ConverterConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConverterConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConverterConf* internal_default_instance() {
    return reinterpret_cast<const ConverterConf*>(
               &_ConverterConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConverterConf& a, ConverterConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ConverterConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConverterConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConverterConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConverterConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConverterConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConverterConf& from) {
    ConverterConf::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConverterConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.cyber.ConverterConf";
  }
  protected:
  explicit ConverterConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kApolloChannelName0FieldNumber = 2,
    kApolloChannelName1FieldNumber = 3,
    kApolloChannelName2FieldNumber = 4,
    kApolloChannelName3FieldNumber = 5,
    kRosTopicName0FieldNumber = 6,
    kRosTopicName1FieldNumber = 7,
    kRosTopicName2FieldNumber = 8,
    kRosTopicName3FieldNumber = 9,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string apollo_channel_name_0 = 2;
  bool has_apollo_channel_name_0() const;
  private:
  bool _internal_has_apollo_channel_name_0() const;
  public:
  void clear_apollo_channel_name_0();
  const std::string& apollo_channel_name_0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apollo_channel_name_0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apollo_channel_name_0();
  PROTOBUF_NODISCARD std::string* release_apollo_channel_name_0();
  void set_allocated_apollo_channel_name_0(std::string* apollo_channel_name_0);
  private:
  const std::string& _internal_apollo_channel_name_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apollo_channel_name_0(const std::string& value);
  std::string* _internal_mutable_apollo_channel_name_0();
  public:

  // optional string apollo_channel_name_1 = 3;
  bool has_apollo_channel_name_1() const;
  private:
  bool _internal_has_apollo_channel_name_1() const;
  public:
  void clear_apollo_channel_name_1();
  const std::string& apollo_channel_name_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apollo_channel_name_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apollo_channel_name_1();
  PROTOBUF_NODISCARD std::string* release_apollo_channel_name_1();
  void set_allocated_apollo_channel_name_1(std::string* apollo_channel_name_1);
  private:
  const std::string& _internal_apollo_channel_name_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apollo_channel_name_1(const std::string& value);
  std::string* _internal_mutable_apollo_channel_name_1();
  public:

  // optional string apollo_channel_name_2 = 4;
  bool has_apollo_channel_name_2() const;
  private:
  bool _internal_has_apollo_channel_name_2() const;
  public:
  void clear_apollo_channel_name_2();
  const std::string& apollo_channel_name_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apollo_channel_name_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apollo_channel_name_2();
  PROTOBUF_NODISCARD std::string* release_apollo_channel_name_2();
  void set_allocated_apollo_channel_name_2(std::string* apollo_channel_name_2);
  private:
  const std::string& _internal_apollo_channel_name_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apollo_channel_name_2(const std::string& value);
  std::string* _internal_mutable_apollo_channel_name_2();
  public:

  // optional string apollo_channel_name_3 = 5;
  bool has_apollo_channel_name_3() const;
  private:
  bool _internal_has_apollo_channel_name_3() const;
  public:
  void clear_apollo_channel_name_3();
  const std::string& apollo_channel_name_3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apollo_channel_name_3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apollo_channel_name_3();
  PROTOBUF_NODISCARD std::string* release_apollo_channel_name_3();
  void set_allocated_apollo_channel_name_3(std::string* apollo_channel_name_3);
  private:
  const std::string& _internal_apollo_channel_name_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apollo_channel_name_3(const std::string& value);
  std::string* _internal_mutable_apollo_channel_name_3();
  public:

  // optional string ros_topic_name_0 = 6;
  bool has_ros_topic_name_0() const;
  private:
  bool _internal_has_ros_topic_name_0() const;
  public:
  void clear_ros_topic_name_0();
  const std::string& ros_topic_name_0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ros_topic_name_0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ros_topic_name_0();
  PROTOBUF_NODISCARD std::string* release_ros_topic_name_0();
  void set_allocated_ros_topic_name_0(std::string* ros_topic_name_0);
  private:
  const std::string& _internal_ros_topic_name_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ros_topic_name_0(const std::string& value);
  std::string* _internal_mutable_ros_topic_name_0();
  public:

  // optional string ros_topic_name_1 = 7;
  bool has_ros_topic_name_1() const;
  private:
  bool _internal_has_ros_topic_name_1() const;
  public:
  void clear_ros_topic_name_1();
  const std::string& ros_topic_name_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ros_topic_name_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ros_topic_name_1();
  PROTOBUF_NODISCARD std::string* release_ros_topic_name_1();
  void set_allocated_ros_topic_name_1(std::string* ros_topic_name_1);
  private:
  const std::string& _internal_ros_topic_name_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ros_topic_name_1(const std::string& value);
  std::string* _internal_mutable_ros_topic_name_1();
  public:

  // optional string ros_topic_name_2 = 8;
  bool has_ros_topic_name_2() const;
  private:
  bool _internal_has_ros_topic_name_2() const;
  public:
  void clear_ros_topic_name_2();
  const std::string& ros_topic_name_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ros_topic_name_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ros_topic_name_2();
  PROTOBUF_NODISCARD std::string* release_ros_topic_name_2();
  void set_allocated_ros_topic_name_2(std::string* ros_topic_name_2);
  private:
  const std::string& _internal_ros_topic_name_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ros_topic_name_2(const std::string& value);
  std::string* _internal_mutable_ros_topic_name_2();
  public:

  // optional string ros_topic_name_3 = 9;
  bool has_ros_topic_name_3() const;
  private:
  bool _internal_has_ros_topic_name_3() const;
  public:
  void clear_ros_topic_name_3();
  const std::string& ros_topic_name_3() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ros_topic_name_3(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ros_topic_name_3();
  PROTOBUF_NODISCARD std::string* release_ros_topic_name_3();
  void set_allocated_ros_topic_name_3(std::string* ros_topic_name_3);
  private:
  const std::string& _internal_ros_topic_name_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ros_topic_name_3(const std::string& value);
  std::string* _internal_mutable_ros_topic_name_3();
  public:

  // @@protoc_insertion_point(class_scope:apollo.cyber.ConverterConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apollo_channel_name_0_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apollo_channel_name_1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apollo_channel_name_2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apollo_channel_name_3_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ros_topic_name_0_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ros_topic_name_1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ros_topic_name_2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ros_topic_name_3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_converter_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConverterConf

// optional string name = 1;
inline bool ConverterConf::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConverterConf::has_name() const {
  return _internal_has_name();
}
inline void ConverterConf::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConverterConf::name() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.ConverterConf.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterConf::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.ConverterConf.name)
}
inline std::string* ConverterConf::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.ConverterConf.name)
  return _s;
}
inline const std::string& ConverterConf::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ConverterConf::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ConverterConf::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ConverterConf::release_name() {
  // @@protoc_insertion_point(field_release:apollo.cyber.ConverterConf.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterConf::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.ConverterConf.name)
}

// optional string apollo_channel_name_0 = 2;
inline bool ConverterConf::_internal_has_apollo_channel_name_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConverterConf::has_apollo_channel_name_0() const {
  return _internal_has_apollo_channel_name_0();
}
inline void ConverterConf::clear_apollo_channel_name_0() {
  _impl_.apollo_channel_name_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConverterConf::apollo_channel_name_0() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.ConverterConf.apollo_channel_name_0)
  return _internal_apollo_channel_name_0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterConf::set_apollo_channel_name_0(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.apollo_channel_name_0_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.ConverterConf.apollo_channel_name_0)
}
inline std::string* ConverterConf::mutable_apollo_channel_name_0() {
  std::string* _s = _internal_mutable_apollo_channel_name_0();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.ConverterConf.apollo_channel_name_0)
  return _s;
}
inline const std::string& ConverterConf::_internal_apollo_channel_name_0() const {
  return _impl_.apollo_channel_name_0_.Get();
}
inline void ConverterConf::_internal_set_apollo_channel_name_0(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.apollo_channel_name_0_.Set(value, GetArenaForAllocation());
}
inline std::string* ConverterConf::_internal_mutable_apollo_channel_name_0() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.apollo_channel_name_0_.Mutable(GetArenaForAllocation());
}
inline std::string* ConverterConf::release_apollo_channel_name_0() {
  // @@protoc_insertion_point(field_release:apollo.cyber.ConverterConf.apollo_channel_name_0)
  if (!_internal_has_apollo_channel_name_0()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.apollo_channel_name_0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apollo_channel_name_0_.IsDefault()) {
    _impl_.apollo_channel_name_0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterConf::set_allocated_apollo_channel_name_0(std::string* apollo_channel_name_0) {
  if (apollo_channel_name_0 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.apollo_channel_name_0_.SetAllocated(apollo_channel_name_0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apollo_channel_name_0_.IsDefault()) {
    _impl_.apollo_channel_name_0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.ConverterConf.apollo_channel_name_0)
}

// optional string apollo_channel_name_1 = 3;
inline bool ConverterConf::_internal_has_apollo_channel_name_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConverterConf::has_apollo_channel_name_1() const {
  return _internal_has_apollo_channel_name_1();
}
inline void ConverterConf::clear_apollo_channel_name_1() {
  _impl_.apollo_channel_name_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConverterConf::apollo_channel_name_1() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.ConverterConf.apollo_channel_name_1)
  return _internal_apollo_channel_name_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterConf::set_apollo_channel_name_1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.apollo_channel_name_1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.ConverterConf.apollo_channel_name_1)
}
inline std::string* ConverterConf::mutable_apollo_channel_name_1() {
  std::string* _s = _internal_mutable_apollo_channel_name_1();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.ConverterConf.apollo_channel_name_1)
  return _s;
}
inline const std::string& ConverterConf::_internal_apollo_channel_name_1() const {
  return _impl_.apollo_channel_name_1_.Get();
}
inline void ConverterConf::_internal_set_apollo_channel_name_1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.apollo_channel_name_1_.Set(value, GetArenaForAllocation());
}
inline std::string* ConverterConf::_internal_mutable_apollo_channel_name_1() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.apollo_channel_name_1_.Mutable(GetArenaForAllocation());
}
inline std::string* ConverterConf::release_apollo_channel_name_1() {
  // @@protoc_insertion_point(field_release:apollo.cyber.ConverterConf.apollo_channel_name_1)
  if (!_internal_has_apollo_channel_name_1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.apollo_channel_name_1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apollo_channel_name_1_.IsDefault()) {
    _impl_.apollo_channel_name_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterConf::set_allocated_apollo_channel_name_1(std::string* apollo_channel_name_1) {
  if (apollo_channel_name_1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.apollo_channel_name_1_.SetAllocated(apollo_channel_name_1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apollo_channel_name_1_.IsDefault()) {
    _impl_.apollo_channel_name_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.ConverterConf.apollo_channel_name_1)
}

// optional string apollo_channel_name_2 = 4;
inline bool ConverterConf::_internal_has_apollo_channel_name_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConverterConf::has_apollo_channel_name_2() const {
  return _internal_has_apollo_channel_name_2();
}
inline void ConverterConf::clear_apollo_channel_name_2() {
  _impl_.apollo_channel_name_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ConverterConf::apollo_channel_name_2() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.ConverterConf.apollo_channel_name_2)
  return _internal_apollo_channel_name_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterConf::set_apollo_channel_name_2(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.apollo_channel_name_2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.ConverterConf.apollo_channel_name_2)
}
inline std::string* ConverterConf::mutable_apollo_channel_name_2() {
  std::string* _s = _internal_mutable_apollo_channel_name_2();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.ConverterConf.apollo_channel_name_2)
  return _s;
}
inline const std::string& ConverterConf::_internal_apollo_channel_name_2() const {
  return _impl_.apollo_channel_name_2_.Get();
}
inline void ConverterConf::_internal_set_apollo_channel_name_2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.apollo_channel_name_2_.Set(value, GetArenaForAllocation());
}
inline std::string* ConverterConf::_internal_mutable_apollo_channel_name_2() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.apollo_channel_name_2_.Mutable(GetArenaForAllocation());
}
inline std::string* ConverterConf::release_apollo_channel_name_2() {
  // @@protoc_insertion_point(field_release:apollo.cyber.ConverterConf.apollo_channel_name_2)
  if (!_internal_has_apollo_channel_name_2()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.apollo_channel_name_2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apollo_channel_name_2_.IsDefault()) {
    _impl_.apollo_channel_name_2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterConf::set_allocated_apollo_channel_name_2(std::string* apollo_channel_name_2) {
  if (apollo_channel_name_2 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.apollo_channel_name_2_.SetAllocated(apollo_channel_name_2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apollo_channel_name_2_.IsDefault()) {
    _impl_.apollo_channel_name_2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.ConverterConf.apollo_channel_name_2)
}

// optional string apollo_channel_name_3 = 5;
inline bool ConverterConf::_internal_has_apollo_channel_name_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ConverterConf::has_apollo_channel_name_3() const {
  return _internal_has_apollo_channel_name_3();
}
inline void ConverterConf::clear_apollo_channel_name_3() {
  _impl_.apollo_channel_name_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ConverterConf::apollo_channel_name_3() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.ConverterConf.apollo_channel_name_3)
  return _internal_apollo_channel_name_3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterConf::set_apollo_channel_name_3(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.apollo_channel_name_3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.ConverterConf.apollo_channel_name_3)
}
inline std::string* ConverterConf::mutable_apollo_channel_name_3() {
  std::string* _s = _internal_mutable_apollo_channel_name_3();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.ConverterConf.apollo_channel_name_3)
  return _s;
}
inline const std::string& ConverterConf::_internal_apollo_channel_name_3() const {
  return _impl_.apollo_channel_name_3_.Get();
}
inline void ConverterConf::_internal_set_apollo_channel_name_3(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.apollo_channel_name_3_.Set(value, GetArenaForAllocation());
}
inline std::string* ConverterConf::_internal_mutable_apollo_channel_name_3() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.apollo_channel_name_3_.Mutable(GetArenaForAllocation());
}
inline std::string* ConverterConf::release_apollo_channel_name_3() {
  // @@protoc_insertion_point(field_release:apollo.cyber.ConverterConf.apollo_channel_name_3)
  if (!_internal_has_apollo_channel_name_3()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.apollo_channel_name_3_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apollo_channel_name_3_.IsDefault()) {
    _impl_.apollo_channel_name_3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterConf::set_allocated_apollo_channel_name_3(std::string* apollo_channel_name_3) {
  if (apollo_channel_name_3 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.apollo_channel_name_3_.SetAllocated(apollo_channel_name_3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apollo_channel_name_3_.IsDefault()) {
    _impl_.apollo_channel_name_3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.ConverterConf.apollo_channel_name_3)
}

// optional string ros_topic_name_0 = 6;
inline bool ConverterConf::_internal_has_ros_topic_name_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ConverterConf::has_ros_topic_name_0() const {
  return _internal_has_ros_topic_name_0();
}
inline void ConverterConf::clear_ros_topic_name_0() {
  _impl_.ros_topic_name_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ConverterConf::ros_topic_name_0() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.ConverterConf.ros_topic_name_0)
  return _internal_ros_topic_name_0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterConf::set_ros_topic_name_0(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.ros_topic_name_0_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.ConverterConf.ros_topic_name_0)
}
inline std::string* ConverterConf::mutable_ros_topic_name_0() {
  std::string* _s = _internal_mutable_ros_topic_name_0();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.ConverterConf.ros_topic_name_0)
  return _s;
}
inline const std::string& ConverterConf::_internal_ros_topic_name_0() const {
  return _impl_.ros_topic_name_0_.Get();
}
inline void ConverterConf::_internal_set_ros_topic_name_0(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ros_topic_name_0_.Set(value, GetArenaForAllocation());
}
inline std::string* ConverterConf::_internal_mutable_ros_topic_name_0() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.ros_topic_name_0_.Mutable(GetArenaForAllocation());
}
inline std::string* ConverterConf::release_ros_topic_name_0() {
  // @@protoc_insertion_point(field_release:apollo.cyber.ConverterConf.ros_topic_name_0)
  if (!_internal_has_ros_topic_name_0()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.ros_topic_name_0_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ros_topic_name_0_.IsDefault()) {
    _impl_.ros_topic_name_0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterConf::set_allocated_ros_topic_name_0(std::string* ros_topic_name_0) {
  if (ros_topic_name_0 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.ros_topic_name_0_.SetAllocated(ros_topic_name_0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ros_topic_name_0_.IsDefault()) {
    _impl_.ros_topic_name_0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.ConverterConf.ros_topic_name_0)
}

// optional string ros_topic_name_1 = 7;
inline bool ConverterConf::_internal_has_ros_topic_name_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ConverterConf::has_ros_topic_name_1() const {
  return _internal_has_ros_topic_name_1();
}
inline void ConverterConf::clear_ros_topic_name_1() {
  _impl_.ros_topic_name_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& ConverterConf::ros_topic_name_1() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.ConverterConf.ros_topic_name_1)
  return _internal_ros_topic_name_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterConf::set_ros_topic_name_1(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.ros_topic_name_1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.ConverterConf.ros_topic_name_1)
}
inline std::string* ConverterConf::mutable_ros_topic_name_1() {
  std::string* _s = _internal_mutable_ros_topic_name_1();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.ConverterConf.ros_topic_name_1)
  return _s;
}
inline const std::string& ConverterConf::_internal_ros_topic_name_1() const {
  return _impl_.ros_topic_name_1_.Get();
}
inline void ConverterConf::_internal_set_ros_topic_name_1(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ros_topic_name_1_.Set(value, GetArenaForAllocation());
}
inline std::string* ConverterConf::_internal_mutable_ros_topic_name_1() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.ros_topic_name_1_.Mutable(GetArenaForAllocation());
}
inline std::string* ConverterConf::release_ros_topic_name_1() {
  // @@protoc_insertion_point(field_release:apollo.cyber.ConverterConf.ros_topic_name_1)
  if (!_internal_has_ros_topic_name_1()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.ros_topic_name_1_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ros_topic_name_1_.IsDefault()) {
    _impl_.ros_topic_name_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterConf::set_allocated_ros_topic_name_1(std::string* ros_topic_name_1) {
  if (ros_topic_name_1 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.ros_topic_name_1_.SetAllocated(ros_topic_name_1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ros_topic_name_1_.IsDefault()) {
    _impl_.ros_topic_name_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.ConverterConf.ros_topic_name_1)
}

// optional string ros_topic_name_2 = 8;
inline bool ConverterConf::_internal_has_ros_topic_name_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ConverterConf::has_ros_topic_name_2() const {
  return _internal_has_ros_topic_name_2();
}
inline void ConverterConf::clear_ros_topic_name_2() {
  _impl_.ros_topic_name_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& ConverterConf::ros_topic_name_2() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.ConverterConf.ros_topic_name_2)
  return _internal_ros_topic_name_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterConf::set_ros_topic_name_2(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.ros_topic_name_2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.ConverterConf.ros_topic_name_2)
}
inline std::string* ConverterConf::mutable_ros_topic_name_2() {
  std::string* _s = _internal_mutable_ros_topic_name_2();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.ConverterConf.ros_topic_name_2)
  return _s;
}
inline const std::string& ConverterConf::_internal_ros_topic_name_2() const {
  return _impl_.ros_topic_name_2_.Get();
}
inline void ConverterConf::_internal_set_ros_topic_name_2(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ros_topic_name_2_.Set(value, GetArenaForAllocation());
}
inline std::string* ConverterConf::_internal_mutable_ros_topic_name_2() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.ros_topic_name_2_.Mutable(GetArenaForAllocation());
}
inline std::string* ConverterConf::release_ros_topic_name_2() {
  // @@protoc_insertion_point(field_release:apollo.cyber.ConverterConf.ros_topic_name_2)
  if (!_internal_has_ros_topic_name_2()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.ros_topic_name_2_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ros_topic_name_2_.IsDefault()) {
    _impl_.ros_topic_name_2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterConf::set_allocated_ros_topic_name_2(std::string* ros_topic_name_2) {
  if (ros_topic_name_2 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.ros_topic_name_2_.SetAllocated(ros_topic_name_2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ros_topic_name_2_.IsDefault()) {
    _impl_.ros_topic_name_2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.ConverterConf.ros_topic_name_2)
}

// optional string ros_topic_name_3 = 9;
inline bool ConverterConf::_internal_has_ros_topic_name_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ConverterConf::has_ros_topic_name_3() const {
  return _internal_has_ros_topic_name_3();
}
inline void ConverterConf::clear_ros_topic_name_3() {
  _impl_.ros_topic_name_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& ConverterConf::ros_topic_name_3() const {
  // @@protoc_insertion_point(field_get:apollo.cyber.ConverterConf.ros_topic_name_3)
  return _internal_ros_topic_name_3();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConverterConf::set_ros_topic_name_3(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000100u;
 _impl_.ros_topic_name_3_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:apollo.cyber.ConverterConf.ros_topic_name_3)
}
inline std::string* ConverterConf::mutable_ros_topic_name_3() {
  std::string* _s = _internal_mutable_ros_topic_name_3();
  // @@protoc_insertion_point(field_mutable:apollo.cyber.ConverterConf.ros_topic_name_3)
  return _s;
}
inline const std::string& ConverterConf::_internal_ros_topic_name_3() const {
  return _impl_.ros_topic_name_3_.Get();
}
inline void ConverterConf::_internal_set_ros_topic_name_3(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.ros_topic_name_3_.Set(value, GetArenaForAllocation());
}
inline std::string* ConverterConf::_internal_mutable_ros_topic_name_3() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.ros_topic_name_3_.Mutable(GetArenaForAllocation());
}
inline std::string* ConverterConf::release_ros_topic_name_3() {
  // @@protoc_insertion_point(field_release:apollo.cyber.ConverterConf.ros_topic_name_3)
  if (!_internal_has_ros_topic_name_3()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* p = _impl_.ros_topic_name_3_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ros_topic_name_3_.IsDefault()) {
    _impl_.ros_topic_name_3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConverterConf::set_allocated_ros_topic_name_3(std::string* ros_topic_name_3) {
  if (ros_topic_name_3 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.ros_topic_name_3_.SetAllocated(ros_topic_name_3, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ros_topic_name_3_.IsDefault()) {
    _impl_.ros_topic_name_3_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:apollo.cyber.ConverterConf.ros_topic_name_3)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace cyber
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_converter_5fconf_2eproto
